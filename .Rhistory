healthy_FC <- healthy_ig %>% mutate(FC_tet_healthy = Tetanis_Means/all_healthy_Means)
healthy_tet_fc <- healthy_FC[,c(1,2,11,12)]
healthy_tet_fc_tidy <- gather(healthy_tet_fc, 'group','foldChange',2:4)
healthy_tet_fc_tidy$foldChange <- round(healthy_tet_fc_tidy$foldChange,3)
head(healthy_tet_fc_tidy)
ggplot(data = healthy_tet_fc_tidy, aes(x=GENE_SYMBOL, y=foldChange, fill=group)) +
geom_bar(stat='identity', position=position_dodge())+
scale_y_continuous(breaks = seq(0, 30, by=2), limits=c(0,32))+
scale_fill_brewer(palette='Paired') +
ggtitle('Tetanis Vaccinated to Healthy Samples')+
ylab('Fold Change')+
xlab('Immune Gene')
ggplot(data = healthy_tet_fc_tidy, aes(x=GENE_SYMBOL, y=foldChange, fill=group)) +
geom_bar(stat='identity', position=position_dodge())+
scale_y_continuous(breaks = seq(0, 3, by=.5), limits=c(0,3.5))+
scale_fill_brewer(palette='Paired') +
ggtitle('Tetanis Vaccinated and Healthy Samples for IL2 Range')+
ylab('Fold Change')+
xlab('Immune Gene')
colnames(flu_7day)[2:3] <- paste('flu_',colnames(flu_7day)[2:3], sep='')
colnames(flu_7day)
colnames(healthy)
flu_healthy <- merge(flu_7day, healthy, by.x='Gene', by.y='GENE_SYMBOL')
colnames(flu_healthy)
CD4 <- grep('^CD4$', flu_healthy$Gene)
IL2 <- grep('^IL2$', flu_healthy$Gene)
IFNG <- grep('^IFNG$', flu_healthy$Gene)
IL10 <- grep('^IL10$', flu_healthy$Gene)
IL6 <- grep('^IL6$', flu_healthy$Gene)
flu_healthy1 <- flu_healthy[c(CD4,IL2,IFNG,IL10,IL6),]
head(flu_healthy1)
flu_healthy1$All_Healthy_Mean <- rowMeans(flu_healthy1[,5:12])
flu_healthy2 <- flu_healthy1 %>% mutate(FC_tet_healthy =
Tetanis_Means/All_Healthy_Mean)
flu_healthy3 <- flu_healthy2 %>% mutate(FC_flu_NT7_healthy =
flu_NT7_Mean/All_Healthy_Mean)
flu_healthy4 <- flu_healthy3 %>% mutate(FC_flu_T7_healthy =
flu_T7_Mean/All_Healthy_Mean)
Flu_Healthy <- flu_healthy4[,c(1:4,13:16)]
Flu_Healthy_tidy <- gather(Flu_Healthy, 'group','foldChange',2:8)
Flu_Healthy_tidy$foldChange <- round(Flu_Healthy_tidy$foldChange,3)
head(Flu_Healthy_tidy)
ggplot(data = Flu_Healthy_tidy, aes(x=Gene, y=foldChange, fill=group)) +
geom_bar(stat='identity', position=position_dodge())+
scale_y_continuous(breaks = seq(0, 27, by=2), limits=c(0,28))+
scale_fill_brewer(palette='Paired') +
ggtitle('Flu Vaccinated Immune Genes Compared to Healthy')+
ylab('Fold Change')+
xlab('Immune Gene')
#Return the column names of all6
colnames(all6)
AD_healthy_male <- c(74,76,82,86,94,96,99,102,123,126,129,130,132,133,134,141)
AD_healthy_female <-c(72,87,88,89,91,97,100,114,116,119,120,124,125,127,128,138)
AD_male <- c(65,66,69,70,75,79,81,85,90,95,98,104,109,110,111,115,118,121,135,136,139,140)
AD_female <- c(67,68,71,73,77,78,80,83,84,92,93,101,103,105,106,107,108,112,113,117,122,131,137,142)
Hemo_healthy_female <- c(234,235)
Hemo_healthy_male <- c(231,232,233,236)
Hemo_disease_male <- c(213:218,220,221,223:226,230)
Hemo_disease_female <- c(219,222,227:229)
female_overweight <- c(185:198)
female_overweight_EGCG_treated <- c(199:205)
female_overweight_EGCG_Plus_treated <- c(206:212)
flu_healthy_control <- c(155,160,165,170,175,180)
flu_Plus_antibiotics_day1 <- c(156,161,166)
flu_Plus_antibiotics_day3 <- c(157,162,167)
flu_Plus_antibiotics_day7 <- c(158,163,168)
flu_Plus_antibiotics_day21 <- c(159,164,169)
flu_no_antibiotics_day1 <- c(171,176,181)
flu_no_antibiotics_day3 <- c(172,177,182)
flu_no_antibiotics_day7 <- c(173,178,183)
flu_no_antibiotics_day21 <- c(174,179,184)
MI_healthy_males <- c(143:148)
MI_males <- c(149:154)
tetanis_immunized <- c(59:64)
SamplesOnly <- all6[,c(1,AD_healthy_male,AD_healthy_female,AD_male,AD_female,
Hemo_healthy_female,Hemo_healthy_male,Hemo_disease_male,
Hemo_disease_female,
female_overweight,female_overweight_EGCG_treated,
female_overweight_EGCG_Plus_treated,
flu_healthy_control,flu_Plus_antibiotics_day1,
flu_Plus_antibiotics_day3,flu_Plus_antibiotics_day7,
flu_Plus_antibiotics_day21,flu_no_antibiotics_day1,
flu_no_antibiotics_day3,flu_no_antibiotics_day7,
flu_no_antibiotics_day21,MI_healthy_males,
MI_males,tetanis_immunized),]
row.names(SamplesOnly) <- SamplesOnly$GENE_SYMBOL
SamplesOnly2 <- SamplesOnly[,-1]
AD_hm <- rep('AD Healthy Male',length(AD_healthy_male))
AD_hf <- rep('AD Healthy Female', length(AD_healthy_female))
AD_m <- rep('AD Male', length(AD_male))
AD_f <- rep('AD Female', length(AD_female))
Hemo_hf <- rep('Hemo Healthy Female', length(Hemo_healthy_female))
Hemo_hm <- rep('Hemo Healthy Male', length(Hemo_healthy_male))
Hemo_m <- rep('Hemo Male', length(Hemo_disease_male))
Hemo_f <- rep('Hemo Female', length(Hemo_disease_female))
overweight_female <- rep('Overweight Female', length(female_overweight))
overweight_female_EGCG <- rep('Overweight Female EGCG Treated',
length(female_overweight_EGCG_treated))
overweight_female_EGCG_Plus <- rep('Overweight Female EGCG+fishOil+VitC',
length(female_overweight_EGCG_Plus_treated))
flu_not_immunized_yet <- rep('Flu non immunized healthy',
length(flu_healthy_control))
flu_Plus_day1 <- rep('Flu Immunized Plus Antibiotics Day 1',
length(flu_Plus_antibiotics_day1))
flu_Plus_day3 <- rep('Flu Immunized Plus Antibiotics Day 3',
length(flu_Plus_antibiotics_day3))
flu_Plus_day7 <- rep('Flu Immunized Plus Antibiotics Day 7',
length(flu_Plus_antibiotics_day7))
flu_Plus_day21 <- rep('Flu Immunized Plus Antibiotics Day 21',
length(flu_Plus_antibiotics_day21))
flu_only_day1 <- rep('Flu Immunized Only Day 1', length(flu_no_antibiotics_day1))
flu_only_day3 <- rep('Flu Immunized Only Day 3', length(flu_no_antibiotics_day3))
flu_only_day7 <- rep('Flu Immunized Only Day 7', length(flu_no_antibiotics_day7))
flu_only_day21 <- rep('Flu Immunized Only Day 21', length(flu_no_antibiotics_day21))
MI_hm <- rep('MI Healthy Males', length(MI_healthy_males))
MI_m <- rep('MI Males', length(MI_males))
tet <- rep('Tetanis Immunized', length(tetanis_immunized))
ClassType <- as.data.frame(c(AD_hm, AD_hf, AD_m, AD_f, Hemo_hf, Hemo_hm, Hemo_m, Hemo_f,
overweight_female, overweight_female_EGCG, overweight_female_EGCG_Plus,
flu_not_immunized_yet, flu_Plus_day1, flu_Plus_day3, flu_Plus_day7,
flu_Plus_day21, flu_only_day1, flu_only_day3, flu_only_day7,
flu_only_day21, MI_hm, MI_m, tet))
colnames(ClassType) <- 'Class_Type'
Class2 <- as.data.frame(t(ClassType))
colnames(Class2) <- colnames(SamplesOnly2)
t(Class2) #Compare the row names when transposed to the assigned Class_Type
SamplesOnly3 <- SamplesOnly2
colnames(SamplesOnly3) <- ClassType$Class_Type
write.csv(SamplesOnly3, 'Dracula.csv', row.names=TRUE)
dim(SamplesOnly3)
colnames(SamplesOnly3)
classNames <- colnames(SamplesOnly3)
AD_top125 <- all6[order(all6$Alz_FC_fem_ctrl_AD, decreasing=TRUE)[1:125],c(1,7)]
AD_bottom125 <- all6[order(all6$Alz_FC_fem_ctrl_AD)[1:125],c(1,7)]
AD250 <- rbind(AD_top125,AD_bottom125)
SamplesOnly3$Gene <- row.names(SamplesOnly3)
SamplesOnly4 <- merge(AD250,SamplesOnly3, by.x='GENE_SYMBOL', by.y='Gene')
row.names(SamplesOnly4) <- SamplesOnly4$GENE_SYMBOL
Samples250 <- SamplesOnly4[,-c(1:2)]
ML_250 <- as.data.frame(t(Samples250))
ML_250$Class_Type <- classNames
row.names(ML_250) <- NULL
ML_ready_250 <- ML_250[,c(251,1:250)]
write.csv(ML_ready_250, 'ML_ready_250.csv', row.names=FALSE)
#install.packages('h2o')
library(h2o)
h2o.init(nthreads=-1, max_mem_size="2G")
h2o.removeAll() ## clean slate - just in case the cluster was already running
D = h2o.importFile(path = normalizePath("ML_ready_250.csv"))
#h2o.summary(D) would print the summary stats of these 251 features
data = h2o.splitFrame(D,ratios=c(.7,.15),
destination_frames = c("train","test","valid"))
names(data) <- c('Train','Test','Valid')
m1 = h2o.glm(training_frame = data$Train, validation_frame = data$Valid,
x = colnames(data$Train)[2:251],
y = 'Class_Type',
family='multinomial',
solver='L_BFGS')
h2o.confusionMatrix(m1, valid=TRUE)
m2 = h2o.glm(training_frame = data$Train, validation_frame = data$Valid,
x = colnames(data$Train)[2:251],
y = 'Class_Type',
family='multinomial',
solver='L_BFGS',
lambda = 0)
h2o.confusionMatrix(m2, valid=FALSE)
h2o.confusionMatrix(m2, valid=TRUE)
m3 = h2o.glm(training_frame = data$Train, validation_frame = data$Valid,
x = colnames(data$Train)[2:251],
y = 'Class_Type',
family='multinomial',
solver='L_BFGS',
lambda = 0,
keep_cross_validation_predictions = TRUE)
h2o.confusionMatrix(m3, valid=TRUE)
ML_ready_250 <- read.csv('ML_ready_250.csv', sep=',', header=TRUE, na.strings=c('',' '))
ctrl <- grep('[hH]ealthy',ML_ready_250$Class_Type)
healthy <- ML_ready_250[ctrl,]
disease <- ML_ready_250[-ctrl,]
disease$Class_Type <- 'Not Healthy or Treatment Control'
healthy$Class_Type <- 'Healthy Control'
ML_ready_250_binomial_class <- rbind(disease,healthy)
write.csv(ML_ready_250_binomial_class,'ML_ready_250_binomial.csv', row.names=FALSE)
h2o.init(nthreads=-1, max_mem_size="2G")
h2o.removeAll() ## clean slate - just in case the cluster was already running
D = h2o.importFile(path = normalizePath("ML_ready_250_binomial.csv"))
data = h2o.splitFrame(D,ratios=c(.7,.15),
destination_frames = c("train","test","valid"))
names(data) <- c('Train','Test','Valid')
m4 = h2o.glm(training_frame = data$Train, validation_frame = data$Valid,
x = colnames(data$Train)[2:251],
y = 'Class_Type',
family='binomial',
solver='L_BFGS',
lambda = 0)
h2o.confusionMatrix(m4, valid=TRUE)
library(caret)
library(randomForest)
library(MASS)
library(gbm)
set.seed(189678345)
inTrain <- createDataPartition(y=ML_ready_250$Class_Type, p=0.7, list=FALSE)
trainingSet <- ML_ready_250[inTrain,]
testingSet <- ML_ready_250[-inTrain,]
rfMod <- train(Class_Type~., method='rf', data=(trainingSet),
trControl=trainControl(method='cv'), number=5)
plot(rfMod)
gbmMod <- train(Class_Type~., method='gbm', data=trainingSet, verbose=FALSE )
plot(gbmMod)
ldaMod <- train(Class_Type~., method='lda', data=trainingSet)
predRF <- predict(rfMod, testingSet)
predGbm <- predict(gbmMod, testingSet)
predlda <- predict(ldaMod, testingSet)
predDF <- data.frame(predRF, predGbm, predlda, type=testingSet$Class_Type)
predDF
# CombinedModels <- train(type~., method='gam', data=predDF)
# CombinedPredictions <- predict(CombinedModels, predDF)
# CombinedPredictions
# sum <- sum(CombinedPredictions==testingSet$TYPE)
# length <- length(testingSet$TYPE)
# accuracy_CP1 <- sum/length
sum <- sum(predRF==testingSet$Class_Type)
length <- length(testingSet$Class_Type)
accuracy_rfMod <- (sum/length)
sum <- sum(predGbm==testingSet$Class_Type)
accuracy_gbmMod <- sum/length
sum <- sum(predlda==testingSet$Class_Type)
accuracy_ldaMod <- sum/length
#accuracy_CP1
accuracy_rfMod
accuracy_gbmMod
accuracy_ldaMod
rf2 <- randomForest(Class_Type~., data=trainingSet, method='class')
plot(rf2)
predRF2 <- predict(rf2, testingSet, type='class')
sum <- sum(predRF2==testingSet$Class_Type)
accuracy_RF2 <- sum/length
confusionMatrix(predRF2, testingSet$Class_Type)
predDF2 <- data.frame(predRF, predRF2, predlda, predGbm, TYPE=testingSet$Class_Type)
# CombinedModels2 <- train(TYPE~., method='gam', data=predDF2)
# CombinedPredictions2 <- predict(CombinedModels2, predDF2)
# CombinedPredictions2
# sum <- sum(CombinedPredictions2==testingSet$TYPE)
# accuracy_CombinedPredictions2 <- sum/length
predDF3 <- data.frame(predRF, predRF2, predlda, predGbm,  TYPE=testingSet$Class_Type)
results <- c(round(accuracy_rfMod,2), round(accuracy_RF2,2),
round(accuracy_ldaMod, 2), round(accuracy_gbmMod,2),
round(100,2))
results <- as.factor(results)
results <- t(data.frame(results))
colnames(results) <- colnames(predDF3)
Results <- rbind(predDF3, results) #37X6
Results
knnMod <- train(Class_Type ~ .,
method='knn', preProcess=c('center','scale'),
tuneLength=10, trControl=trainControl(method='cv'), data=trainingSet)
plot(knnMod)
rpartMod <- train(Class_Type ~ ., method='rpart', tuneLength=9, data=trainingSet)
plot(rpartMod)
# glmMod <- train(Class_Type ~ .,
#                 method='glm', data=trainingSet)
predKNN <- predict(knnMod, testingSet)
predRPART <- predict(rpartMod, testingSet)
#predGLM <- predict(glmMod, testingSet)
length=length(testingSet$Class_Type)
sumKNN <- sum(predKNN==testingSet$Class_Type)
sumRPart <- sum(predRPART==testingSet$Class_Type)
#sumGLM <- sum(predGLM==testingSet$TYPE)
accuracy_KNN <- sumKNN/length
accuracy_RPART <- sumRPart/length
#accuracy_GLM <- sumGLM/length
predDF3 <- data.frame(predDF2[,1:4],predKNN,predRPART,
TYPE=testingSet$Class_Type)
accuracy_KNN
accuracy_RPART
#accuracy_GLM
predDF3
# CombinedModels <- train(TYPE ~ ., method='gam', data=predDF3)
# CombinedPredictions2 <- predict(CombinedModels, predDF3)
#
# accuracy_CP2 <- sum(CombinedPredictions2==testingSet$TYPE)/length
predDF4 <- data.frame(predDF3[,1:6], TYPE=testingSet$Class_Type)
colnames(predDF4)
results <- c(round(accuracy_rfMod,2), round(accuracy_RF2,2),
round(accuracy_ldaMod, 2), round(accuracy_gbmMod,2),
round(accuracy_KNN,2), round(accuracy_RPART,2),
round(100,2))
results <- as.factor(results)
results <- t(data.frame(results))
colnames(results) <- colnames(predDF4)
Results <- rbind(predDF4, results)
Results
inTrain <- createDataPartition(y=ML_ready_250_binomial_class$Class_Type, p=0.7, list=FALSE)
trainingSet <- ML_ready_250_binomial_class[inTrain,]
testingSet <- ML_ready_250_binomial_class[-inTrain,]
rfMod <- train(Class_Type~., method='rf', data=(trainingSet),
trControl=trainControl(method='cv'), number=5)
plot(rfMod)
gbmMod <- train(Class_Type~., method='gbm', data=trainingSet, verbose=FALSE )
plot(gbmMod)
ldaMod <- train(Class_Type~., method='lda', data=trainingSet)
predRF <- predict(rfMod, testingSet)
predGbm <- predict(gbmMod, testingSet)
predlda <- predict(ldaMod, testingSet)
predDF <- data.frame(predRF, predGbm, predlda, type=testingSet$Class_Type)
predDF
# CombinedModels <- train(type~., method='gam', data=predDF)
# CombinedPredictions <- predict(CombinedModels, predDF)
# CombinedPredictions
# sum <- sum(CombinedPredictions==testingSet$TYPE)
# length <- length(testingSet$TYPE)
# accuracy_CP1 <- sum/length
sum <- sum(predRF==testingSet$Class_Type)
length <- length(testingSet$Class_Type)
accuracy_rfMod <- (sum/length)
sum <- sum(predGbm==testingSet$Class_Type)
accuracy_gbmMod <- sum/length
sum <- sum(predlda==testingSet$Class_Type)
accuracy_ldaMod <- sum/length
#accuracy_CP1
accuracy_rfMod
accuracy_gbmMod
accuracy_ldaMod
# rf2 <- randomForest(Class_Type~., data=trainingSet)
#
# plot(rf2)
# predRF2 <- predict(rf2, testingSet, type='class')
#
# sum <- sum(predRF2==testingSet$Class_Type)
# accuracy_RF2 <- sum/length
#
# confusionMatrix(predRF2, testingSet$Class_Type)
predDF2 <- data.frame(predRF, predlda, predGbm, TYPE=testingSet$Class_Type)
# CombinedModels2 <- train(TYPE~., method='gam', data=predDF2)
# CombinedPredictions2 <- predict(CombinedModels2, predDF2)
# CombinedPredictions2
# sum <- sum(CombinedPredictions2==testingSet$TYPE)
# accuracy_CombinedPredictions2 <- sum/length
predDF3 <- data.frame(predRF, predlda, predGbm,  TYPE=testingSet$Class_Type)
results <- c(round(accuracy_rfMod,2),
round(accuracy_ldaMod, 2), round(accuracy_gbmMod,2),
round(100,2))
results <- as.factor(results)
results <- t(data.frame(results))
colnames(results) <- colnames(predDF3)
Results <- rbind(predDF3, results)
Results
knnMod <- train(Class_Type ~ .,
method='knn', preProcess=c('center','scale'),
tuneLength=10, trControl=trainControl(method='cv'), data=trainingSet)
plot(knnMod)
rpartMod <- train(Class_Type ~ ., method='rpart', tuneLength=9, data=trainingSet)
plot(rpartMod)
# glmMod <- train(Class_Type ~ .,
#                 method='glm', data=trainingSet)
predKNN <- predict(knnMod, testingSet)
predRPART <- predict(rpartMod, testingSet)
#predGLM <- predict(glmMod, testingSet)
length=length(testingSet$Class_Type)
sumKNN <- sum(predKNN==testingSet$Class_Type)
sumRPart <- sum(predRPART==testingSet$Class_Type)
#sumGLM <- sum(predGLM==testingSet$TYPE)
accuracy_KNN <- sumKNN/length
accuracy_RPART <- sumRPart/length
#accuracy_GLM <- sumGLM/length
predDF3 <- data.frame(predDF2[,1:3],predKNN,predRPART,
TYPE=testingSet$Class_Type)
accuracy_KNN
accuracy_RPART
#accuracy_GLM
predDF3
# CombinedModels <- train(TYPE ~ ., method='gam', data=predDF3)
# CombinedPredictions2 <- predict(CombinedModels, predDF3)
#
# accuracy_CP2 <- sum(CombinedPredictions2==testingSet$TYPE)/length
predDF4 <- data.frame(predDF3[,1:5], TYPE=testingSet$Class_Type)
colnames(predDF4)
results <- c(round(accuracy_rfMod,2),
round(accuracy_ldaMod, 2), round(accuracy_gbmMod,2),
round(accuracy_KNN,2), round(accuracy_RPART,2),
round(100,2))
results <- as.factor(results)
results <- t(data.frame(results))
colnames(results) <- colnames(predDF4)
Results <- rbind(predDF4, results)
Results
all <- read.csv('all_6_studies.csv', sep=',', header=T, na.strings=c('',' '))
dracula <- read.csv('Dracula.csv', sep=',', header=T, na.strings=c('',' '))
hemoFCm <- all[order(all$hemo_FC_malesOverall, decreasing=TRUE)[1:20],]
hemoFCf <- all[order(all$hemo_FC_femalesOverall, decreasing=TRUE)[1:20],]
hemoFCmL <- all[order(all$hemo_FC_malesOverall)[1:20],]
hemoFCfL <- all[order(all$hemo_FC_femalesOverall)[1:20],]
Hemochromatosis <- rbind(hemoFCm,hemoFCf,hemoFCmL,hemoFCfL)
ironToxic <- Hemochromatosis[!duplicated(Hemochromatosis),]
ironToxic$GENE_SYMBOL
IronDataGenes <- as.data.frame(unique(ironToxic$GENE_SYMBOL))
colnames(IronDataGenes) <- 'Gene'
IronData2 <- merge(IronDataGenes, dracula, by.x='Gene', by.y='X')
row.names(IronData2) <- IronDataGenes$Gene
IronData3 <- IronData2[,-1]
Class_Type <- colnames(IronData3)
ClassType <- gsub('.[0-9]$','', colnames(IronData3))
ClassType
ClassType2 <- ML_ready_250$Class_Type
compare <- cbind(as.data.frame(ClassType),as.data.frame(ClassType2))
compare
#Same samples for the class type
IronData_ML <- as.data.frame(t(IronData3))
row.names(IronData_ML) <- NULL
IronData_ML$Class_Type <- ClassType2
IronData_ML <- IronData_ML[,c(74,1:73)]
write.csv(IronData_ML, 'hemochromatosis_ML_ready.csv', row.names=FALSE)
inTrain <- createDataPartition(y=IronData_ML$Class_Type, p=0.7, list=FALSE)
trainingSet <- IronData_ML[inTrain,]
testingSet <- IronData_ML[-inTrain,]
knnMod <- train(Class_Type ~ .,
method='knn', preProcess=c('center','scale'),
tuneLength=10, trControl=trainControl(method='cv'), data=trainingSet)
plot(knnMod)
predKNN <- predict(knnMod, testingSet)
length=length(testingSet$Class_Type)
sumKNN <- sum(predKNN==testingSet$Class_Type)
accuracy_KNN <- sumKNN/length
predDF_3 <- data.frame(predKNN,
TYPE=testingSet$Class_Type)
accuracy_KNN
predDF3
h2o.init(nthreads=-1, max_mem_size="2G")
h2o.removeAll() ## clean slate - just in case the cluster was already running
D = h2o.importFile(path = normalizePath("hemochromatosis_ML_ready.csv"))
#h2o.summary(D) would print the summary stats of these 251 features
data = h2o.splitFrame(D,ratios=c(.7,.15),
destination_frames = c("train","test","valid"))
names(data) <- c('Train','Test','Valid')
m1 = h2o.glm(training_frame = data$Train, validation_frame = data$Valid,
x = colnames(data$Train)[2:74],
y = 'Class_Type',
family='multinomial',
solver='L_BFGS')
h2o.confusionMatrix(m1, valid=TRUE)
m2 = h2o.glm(training_frame = data$Train, validation_frame = data$Valid,
x = colnames(data$Train)[2:74],
y = 'Class_Type',
family='multinomial',
solver='L_BFGS',
lambda = 0)
h2o.confusionMatrix(m2, valid=FALSE)
h2o.confusionMatrix(m2, valid=TRUE)
unique(IronData_ML$Class_Type)
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
FHT_HemoOnly <- FHT[grep('Hemo Healthy', FHT$Class_Type)]
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
FHT_HemoOnly <- FHT[grep('Hemo Healthy', FHT$Class_Type),]
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
FHT_HemoOnly <- FHT[-grep('Hemo Healthy', FHT$Class_Type),]
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
FHT_HemoOnly <- FHT[-grep('Hemo Healthy', FHT$Class_Type),]
FHT_HemoOnly
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
FHT_HemoOnly <- FHT[-grep('Hemo Healthy', FHT$Class_Type),]
FHT2 <- FHT_HemoOnly[-grep('FLu non', FHT_HemoOnly$Class_Type),]
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
FHT_HemoOnly <- FHT[-grep('Hemo Healthy', FHT$Class_Type),]
FHT2 <- FHT_HemoOnly[-grep('FLu non', FHT_HemoOnly$Class_Type),]
FHT2
View(FHT_HemoOnly)
Flu <- IronData_ML[grep('Flu', IronData_ML$Class_Type),]
Hemo <- IronData_ML[grep('Hemo', IronData_ML$Class_Type),]
tet <- IronData_ML[grep('Tet', IronData_ML$Class_Type),]
FHT <- rbind(Flu, Hemo, tet)
FHT_HemoOnly <- FHT[-grep('Hemo Healthy', FHT$Class_Type),]
FHT2 <- FHT_HemoOnly[-grep('FLu non ', FHT_HemoOnly$Class_Type),]
FHT2
grep('FLu non ', FHT_HemoOnly$Class_Type)
inTrain <- createDataPartition(y=FHT_HemoOnly$Class_Type, p=0.7, list=FALSE)
trainingSet <- FHT_HemoOnly[inTrain,]
testingSet <- FHT_HemoOnly[-inTrain,]
knnMod <- train(Class_Type ~ .,
method='knn', preProcess=c('center','scale'),
tuneLength=10, trControl=trainControl(method='cv'), data=trainingSet)
predKNN <- predict(knnMod, testingSet)
length=length(testingSet$Class_Type)
sumKNN <- sum(predKNN==testingSet$Class_Type)
accuracy_KNN <- sumKNN/length
predDF_3 <- data.frame(predKNN,
TYPE=testingSet$Class_Type)
accuracy_KNN
